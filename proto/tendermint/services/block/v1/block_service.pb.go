// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/services/block/v1/block_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("tendermint/services/block/v1/block_service.proto", fileDescriptor_1488dadaa3ae41e3)
}

var fileDescriptor_1488dadaa3ae41e3 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x28, 0x49, 0xcd, 0x4b,
	0x49, 0x2d, 0xca, 0xcd, 0xcc, 0x2b, 0xd1, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6,
	0x4f, 0xca, 0xc9, 0x4f, 0xce, 0xd6, 0x2f, 0x33, 0x84, 0x30, 0xe2, 0xa1, 0xe2, 0x7a, 0x05, 0x45,
	0xf9, 0x25, 0xf9, 0x42, 0x32, 0x08, 0x1d, 0x7a, 0x30, 0x1d, 0x7a, 0x60, 0x85, 0x7a, 0x65, 0x86,
	0x52, 0x1a, 0x84, 0xcd, 0x83, 0x98, 0x63, 0xd4, 0xcc, 0xcc, 0xc5, 0xe3, 0x04, 0xe2, 0x07, 0x43,
	0x94, 0x09, 0x35, 0x31, 0x72, 0xf1, 0xbb, 0xa7, 0x96, 0xf8, 0x24, 0x96, 0xa4, 0x16, 0x97, 0x78,
	0xa4, 0x66, 0xa6, 0x67, 0x94, 0x08, 0x99, 0xe8, 0xe1, 0xb3, 0x4d, 0x0f, 0x4d, 0x79, 0x50, 0x6a,
	0x61, 0x69, 0x6a, 0x71, 0x89, 0x94, 0x29, 0x89, 0xba, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x95,
	0x18, 0x0c, 0x18, 0x85, 0xb2, 0xb9, 0x38, 0xdc, 0x53, 0x4b, 0xc0, 0xee, 0x12, 0xd2, 0x25, 0x68,
	0x0c, 0x58, 0x1d, 0xcc, 0x56, 0x3d, 0x62, 0x95, 0xc3, 0xac, 0x13, 0x6a, 0x80, 0xf8, 0x18, 0x26,
	0x5c, 0x9a, 0x53, 0x52, 0x4c, 0x84, 0x8f, 0x91, 0x95, 0x13, 0xef, 0x63, 0x54, 0x5d, 0x30, 0x27,
	0x38, 0xc5, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13,
	0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x73, 0x7a, 0x66,
	0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0x52, 0xa4, 0x22, 0x31, 0xc1, 0xf1, 0xa8,
	0x8f, 0x2f, 0xc2, 0x93, 0xd8, 0xc0, 0x6a, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xd4,
	0xe1, 0x47, 0x67, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockServiceClient is the client API for BlockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockServiceClient interface {
	// GetLatestHeight returns a stream of the latest block heights as blocks
	// are committed at those heights.
	GetLatestHeight(ctx context.Context, in *GetLatestHeightRequest, opts ...grpc.CallOption) (BlockService_GetLatestHeightClient, error)
	// GetBlock attempts to retrieve the block at a particular height,
	// including all of its transactions.
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	// GetBlockResults attempts to retrieve the results of block execution for
	// a particular height, including all events and transaction execution
	// results.
	GetBlockResults(ctx context.Context, in *GetBlockResultsRequest, opts ...grpc.CallOption) (*GetBlockResultsResponse, error)
}

type blockServiceClient struct {
	cc grpc1.ClientConn
}

func NewBlockServiceClient(cc grpc1.ClientConn) BlockServiceClient {
	return &blockServiceClient{cc}
}

func (c *blockServiceClient) GetLatestHeight(ctx context.Context, in *GetLatestHeightRequest, opts ...grpc.CallOption) (BlockService_GetLatestHeightClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BlockService_serviceDesc.Streams[0], "/tendermint.services.block.v1.BlockService/GetLatestHeight", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockServiceGetLatestHeightClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockService_GetLatestHeightClient interface {
	Recv() (*GetLatestHeightResponse, error)
	grpc.ClientStream
}

type blockServiceGetLatestHeightClient struct {
	grpc.ClientStream
}

func (x *blockServiceGetLatestHeightClient) Recv() (*GetLatestHeightResponse, error) {
	m := new(GetLatestHeightResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/tendermint.services.block.v1.BlockService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockServiceClient) GetBlockResults(ctx context.Context, in *GetBlockResultsRequest, opts ...grpc.CallOption) (*GetBlockResultsResponse, error) {
	out := new(GetBlockResultsResponse)
	err := c.cc.Invoke(ctx, "/tendermint.services.block.v1.BlockService/GetBlockResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockServiceServer is the server API for BlockService service.
type BlockServiceServer interface {
	// GetLatestHeight returns a stream of the latest block heights as blocks
	// are committed at those heights.
	GetLatestHeight(*GetLatestHeightRequest, BlockService_GetLatestHeightServer) error
	// GetBlock attempts to retrieve the block at a particular height,
	// including all of its transactions.
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	// GetBlockResults attempts to retrieve the results of block execution for
	// a particular height, including all events and transaction execution
	// results.
	GetBlockResults(context.Context, *GetBlockResultsRequest) (*GetBlockResultsResponse, error)
}

// UnimplementedBlockServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBlockServiceServer struct {
}

func (*UnimplementedBlockServiceServer) GetLatestHeight(req *GetLatestHeightRequest, srv BlockService_GetLatestHeightServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLatestHeight not implemented")
}
func (*UnimplementedBlockServiceServer) GetBlock(ctx context.Context, req *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedBlockServiceServer) GetBlockResults(ctx context.Context, req *GetBlockResultsRequest) (*GetBlockResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockResults not implemented")
}

func RegisterBlockServiceServer(s grpc1.Server, srv BlockServiceServer) {
	s.RegisterService(&_BlockService_serviceDesc, srv)
}

func _BlockService_GetLatestHeight_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLatestHeightRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockServiceServer).GetLatestHeight(m, &blockServiceGetLatestHeightServer{stream})
}

type BlockService_GetLatestHeightServer interface {
	Send(*GetLatestHeightResponse) error
	grpc.ServerStream
}

type blockServiceGetLatestHeightServer struct {
	grpc.ServerStream
}

func (x *blockServiceGetLatestHeightServer) Send(m *GetLatestHeightResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.services.block.v1.BlockService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServiceServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockService_GetBlockResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServiceServer).GetBlockResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.services.block.v1.BlockService/GetBlockResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServiceServer).GetBlockResults(ctx, req.(*GetBlockResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tendermint.services.block.v1.BlockService",
	HandlerType: (*BlockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlock",
			Handler:    _BlockService_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockResults",
			Handler:    _BlockService_GetBlockResults_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLatestHeight",
			Handler:       _BlockService_GetLatestHeight_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tendermint/services/block/v1/block_service.proto",
}
